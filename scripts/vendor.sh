#!/bin/bash
# Vendor dependencies for offline builds
# Ensures reproducible builds and security through dependency pinning

set -euo pipefail

echo "📦 Vendoring Rust dependencies for offline builds..."

# Check if cargo is available
if ! command -v cargo >/dev/null 2>&1; then
    echo "❌ ERROR: cargo is not available in PATH"
    echo "   Please install Rust toolchain: https://rustup.rs/"
    exit 1
fi

# Create vendor directory
echo "🔧 Creating vendor directory..."
mkdir -p vendor

# Vendor all workspace dependencies  
echo "📥 Downloading and vendoring dependencies..."
if ! cargo vendor vendor/; then
    echo "❌ ERROR: Failed to vendor dependencies"
    echo "   This might be due to:"
    echo "   - Network connectivity issues"
    echo "   - Invalid Cargo.toml configuration"
    echo "   - Missing or corrupted Cargo.lock"
    exit 1
fi

# Create .cargo directory for config
echo "⚙️  Setting up offline build configuration..."
mkdir -p .cargo

# Create .cargo/config.toml for offline builds
cat > .cargo/config.toml << 'EOF'
# Offline build configuration
# This file is generated by scripts/vendor.sh

[source.crates-io]
replace-with = "vendored-sources"

[source.vendored-sources]
directory = "vendor"
EOF

# Verify the vendor directory contains dependencies
VENDOR_COUNT=$(find vendor -name "*.crate" 2>/dev/null | wc -l)
echo "📊 Vendored $VENDOR_COUNT crate files"

if [ "$VENDOR_COUNT" -eq 0 ]; then
    echo "⚠️  WARNING: No .crate files found in vendor directory"
    echo "   This might indicate an issue with vendoring process"
fi

# Test offline build capability
echo "🧪 Testing offline build capability..."
if cargo check --offline >/dev/null 2>&1; then
    echo "✅ Offline build test successful"
else
    echo "❌ ERROR: Offline build test failed"
    echo "   Run 'cargo check --offline' manually to see detailed error"
    exit 1
fi

# Display vendor directory size
if command -v du >/dev/null 2>&1; then
    VENDOR_SIZE=$(du -sh vendor 2>/dev/null | cut -f1)
    echo "💾 Vendor directory size: $VENDOR_SIZE"
fi

# Create .gitignore entry if it doesn't exist
if [ ! -f .gitignore ] || ! grep -q "^vendor/" .gitignore 2>/dev/null; then
    echo "📝 Adding vendor/ to .gitignore..."
    echo "" >> .gitignore
    echo "# Vendored dependencies (generated by scripts/vendor.sh)" >> .gitignore
    echo "vendor/" >> .gitignore
    echo ".cargo/config.toml" >> .gitignore
fi

echo ""
echo "✅ Dependencies successfully vendored to ./vendor"
echo "🔧 Offline build configuration created at .cargo/config.toml"
echo ""
echo "Usage:"
echo "  cargo build --offline     # Build without network access"
echo "  cargo check --offline     # Check without network access"
echo "  cargo test --offline      # Test without network access"
echo ""
echo "Note: Re-run this script after updating Cargo.toml or Cargo.lock"